"""
回顾
"""

"""
面向对象与面向过程，最根本的差异在思想上
面向过程思想编写的代码，执行效率比较高，更接近于计算机硬件（底层），更直接的执行方式
复用性差，不利于扩展和维护

面向对象更接近人在处理事务时的正常思维逻辑（认识，创造，利用工具-抽象）
代码复用性高于面向过程
在程序设计时，设计者可以更加宏观的去搭建软件框架（开发效率高），便于扩展和维护
缺点是程序执行效率低于面向过程（略微）
"""


"""
类和对象
类：对现实世界进行抽象之后所得到的结果，包含属性和方法，用于创建对象

对象：通过类进行实例化（具象）所得到的具体的事物（一块真实存在于内存的空间，通过引用来访问）
用于完成具体工作
"""

"""
创建类
class 类名（父类）：
类属性
构造函数：私有属性
方法

class 是一个关键字，用于定义
类名要符合标识符的命名规则，首字母要大写，（父类）直接继承于object可以写
属性，包含属性和实例属性，实例属性需要在def init（self）中定义

类属性，属于类，一般通过类名调用，通过对象也可调用，但是不建议，另外通过对象无法修改类属性

实例属性，属于对象所有，通过类名无法直接操作

方法，分为类方法和实例方法，同样，类方法一般通过类名来调用，为当前类服务，实例方法为对象所有，调用时，使用万能的点

删除对象使用 del
删除属性 del 对象名.属性名
"""

"""
类之间的关系
一般有依赖，组合，继承关系

依赖关系：在一个类的方法中，调用了另一个类的对象

组合关系：一个类的属性是其他类的对象（一对一，和一对多）

继承关系：在不改变现有类的前提下，扩展这个类
分为单继承（只要一个直接父类）和多继承（有多个直接父类）
子类会继承父类所有的属性和方法，子类对象可以直接调用

多继承情况下，方法的查找顺序是，先查找写在括号中最左边的类

继承的好处：提高了代码的复用性
继承的缺点：增加了程序的耦合性

需要扩展一个类时使用继承，或包含大量重复代码时

object：是所有类的父类

"""


"""
方法重写：在子类中定义与父类重名的方法，方法的实现不同，重写会覆盖父类的同名方法（涉及到mro查找顺序）

如果在子类中想调用父类的方法（包括被重写的方法），可以使用类名.方法名的方式
还可以使用super(当前类名，self).方法名的方式（python3中，super后面括号内的内容可省略）

单继承中，以上两种调用父类的方式无区别，多继承中使用super更好

mro：方法解析顺序表
作用是：1.保证每个类在其中只出现一次
       2.确定了方法的查找顺序，super查找的是mro算法中，super后面括号中类名在列表中的下一个类
"""

"""
python2中-经典类

python3中-新式类
"""