{
  "uid" : "c7b4afd68ace6a0a",
  "name" : "cnodejs项目",
  "fullName" : "scripts.test001.Test01#test001",
  "historyId" : "46e7231c48893c7158c62d9d2ebbae6a",
  "time" : {
    "start" : 1577681698441,
    "stop" : 1577681699105,
    "duration" : 664
  },
  "description" : "/message/mark_all 标记全部已读",
  "descriptionHtml" : "<p>/message/mark_all 标记全部已读</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 0",
  "statusTrace" : "self = <test001.Test01 object at 0x000001CAB462C860>\ndata = {'case_description': '/message/mark_all 标记全部已读', 'case_expect': '{\"success\": false}', 'case_method': 'post', 'case_params': '', ...}\n\n    @pytest.mark.parametrize('data', test_list)\n    def test001(self,data):\n        response = requests.get(url=data.get('case_url'))\n        test_data = json.loads(data.get('case_expect'))\n        allure.dynamic.title(data.get(\"case_project\"))\n        allure.dynamic.description(data.get(\"case_description\"))\n        try:\n>           tested_data = response.json()\n\nscripts\\test001.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises ValueError: If the response body does not contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using chardet to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n>       return complexjson.loads(self.text, **kwargs)\n\nc:\\python36\\lib\\site-packages\\requests\\models.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Error</title>\\n</head>\\n<body>\\n<pre>Cannot GET /api/v1/message/mark_all</pre>\\n</body>\\n</html>\\n'\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None\nuse_decimal = False, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None,\n            use_decimal=False, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        *encoding* determines the encoding used to interpret any\n        :class:`str` objects decoded by this instance (``'utf-8'`` by\n        default).  It has no effect when decoding :class:`unicode` objects.\n    \n        Note that currently only encodings that are a superset of ASCII work,\n        strings of other encodings should be passed in as :class:`unicode`.\n    \n        *object_hook*, if specified, will be called with the result of every\n        JSON object decoded and its return value will be used in place of the\n        given :class:`dict`.  This can be used to provide custom\n        deserializations (e.g. to support JSON-RPC class hinting).\n    \n        *object_pairs_hook* is an optional function that will be called with\n        the result of any object literal decode with an ordered list of pairs.\n        The return value of *object_pairs_hook* will be used instead of the\n        :class:`dict`.  This feature can be used to implement custom decoders\n        that rely on the order that the key and value pairs are decoded (for\n        example, :func:`collections.OrderedDict` will remember the order of\n        insertion). If *object_hook* is also defined, the *object_pairs_hook*\n        takes priority.\n    \n        *parse_float*, if specified, will be called with the string of every\n        JSON float to be decoded.  By default, this is equivalent to\n        ``float(num_str)``. This can be used to use another datatype or parser\n        for JSON floats (e.g. :class:`decimal.Decimal`).\n    \n        *parse_int*, if specified, will be called with the string of every\n        JSON int to be decoded.  By default, this is equivalent to\n        ``int(num_str)``.  This can be used to use another datatype or parser\n        for JSON integers (e.g. :class:`float`).\n    \n        *parse_constant*, if specified, will be called with one of the\n        following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This\n        can be used to raise an exception if invalid JSON numbers are\n        encountered.\n    \n        If *use_decimal* is true (default: ``False``) then it implies\n        parse_float=decimal.Decimal for parity with ``dump``.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg. NOTE: You should use *object_hook* or *object_pairs_hook* instead\n        of subclassing whenever possible.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None\n                and not use_decimal and not kw):\n>           return _default_decoder.decode(s)\n\nc:\\python36\\lib\\site-packages\\simplejson\\__init__.py:518: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <simplejson.decoder.JSONDecoder object at 0x000001CAB430A710>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Error</title>\\n</head>\\n<body>\\n<pre>Cannot GET /api/v1/message/mark_all</pre>\\n</body>\\n</html>\\n'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x000001CAB33A4270>\n_PY3 = True\n\n    def decode(self, s, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n    \n        \"\"\"\n        if _PY3 and isinstance(s, bytes):\n            s = str(s, self.encoding)\n>       obj, end = self.raw_decode(s)\n\nc:\\python36\\lib\\site-packages\\simplejson\\decoder.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <simplejson.decoder.JSONDecoder object at 0x000001CAB430A710>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n<meta charset=\"utf-8\">\\n<title>Error</title>\\n</head>\\n<body>\\n<pre>Cannot GET /api/v1/message/mark_all</pre>\\n</body>\\n</html>\\n'\nidx = 0\n_w = <built-in method match of _sre.SRE_Pattern object at 0x000001CAB33A4270>\n_PY3 = True\n\n    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n        the JSON document begins.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        if idx < 0:\n            # Ensure that raw_decode bails on negative indexes, the regex\n            # would otherwise mask this behavior. #98\n            raise JSONDecodeError('Expecting value', s, idx)\n        if _PY3 and not isinstance(s, str):\n            raise TypeError(\"Input string must be text, not bytes\")\n        # strip UTF-8 bom\n        if len(s) > idx:\n            ord0 = ord(s[idx])\n            if ord0 == 0xfeff:\n                idx += 1\n            elif ord0 == 0xef and s[idx:idx + 3] == '\\xef\\xbb\\xbf':\n                idx += 3\n>       return self.scan_once(s, idx=_w(s, idx).end())\nE       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nc:\\python36\\lib\\site-packages\\simplejson\\decoder.py:400: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test001.Test01 object at 0x000001CAB462C860>\ndata = {'case_description': '/message/mark_all 标记全部已读', 'case_expect': '{\"success\": false}', 'case_method': 'post', 'case_params': '', ...}\n\n    @pytest.mark.parametrize('data', test_list)\n    def test001(self,data):\n        response = requests.get(url=data.get('case_url'))\n        test_data = json.loads(data.get('case_expect'))\n        allure.dynamic.title(data.get(\"case_project\"))\n        allure.dynamic.description(data.get(\"case_description\"))\n        try:\n            tested_data = response.json()\n        except:\n>           assert 0\nE           assert 0\n\nscripts\\test001.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "scripts"
  }, {
    "name" : "suite",
    "value" : "test001"
  }, {
    "name" : "subSuite",
    "value" : "Test01"
  }, {
    "name" : "host",
    "value" : "LAPTOP-BJF4Q6NL"
  }, {
    "name" : "thread",
    "value" : "7824-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "scripts.test001"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'case_project': 'cnodejs项目', 'case_description': '/message/mark_all 标记全部已读', 'case_url': 'https://cnodejs.org/api/v1/message/mark_all', 'case_method': 'post', 'case_params': '', 'case_expect': '{\"success\": false}'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c7b4afd68ace6a0a.json",
  "parameterValues" : [ "{'case_project': 'cnodejs项目', 'case_description': '/message/mark_all 标记全部已读', 'case_url': 'https://cnodejs.org/api/v1/message/mark_all', 'case_method': 'post', 'case_params': '', 'case_expect': '{\"success\": false}'}" ]
}