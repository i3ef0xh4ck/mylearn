# 1.函数的动态参数
# 动态位置参数：*args  接收多余位置参数，以元组形式存储
# 动态关键字参数：*kwargs 接收多余的关键字参数，以字典的形式

# 参数的优先级：位置参数  动态位置参数 关键字参数 动态关键字参数
# 函数的定义阶段 碰到* **就是聚合
# 在函数体中碰到 *就是打散 *args 打散元组，*kwargs打散字典，获取键
# 在函数的调用阶段*也是打散---后期用到
# *args，**kwargs  可以不给他们传参，没值时args是空元祖，kwargs是字典

# 2.函数的注释
# def func(a:int,b:str):
#     """
#     字符串乘法
#     :param a:int
#     :param b:str
#     :return:str
#     """
#     return a * b
# c = func(3,"a")
# print(c)
# print(func.__doc__)
# print(func.__name__)

# 3.函数的名称空间
# 内置空间
# 全局空间
# 局部空间
# 加载顺序：内置  全局 局部
# 取值空间：局部 全局 内置

# 4.作用域
# 全局作用域：内置+全局  globals()  只查看全局作用域
# 局部作用域：局部  locals() 查看当前作用域，建议只查看局部作用域

# 5.函数名的第一类对象及使用
# 函数名可以当做值赋值给变量
# 函数名可以当做其他函数的参数
# 函数名可以当做其他函数的返回值
# 函数名可以当做容器中的元素

# 6.函数的嵌套
# 交叉嵌套
# 直接嵌套

# 7.global nonlocal
# globals:只修改全局变量
# 全局中没有这个变量时给全局创建这个变量
# 全局中有这个变量时修改这个变量的值

# nonlocl ：只修改局部变量
# 当整个局部中没有这个变量时，不会创建，并且还会报错
#当整个局部中有这个变量时，修改距离nonlocal最近的一层变量
# 若nonlocal的上一层没有就继续向上一层查找，直到最外层的局部空间